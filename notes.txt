=begin  
class Board 
    def initialize(player1, player2)
        @board = [' ',' ',' ',' ',' ',' ',' ',' ',' ']
        @player1 = player1
        @player2 = player2 
    end

    def reset_the_board
        @board = [' ',' ',' ',' ',' ',' ',' ',' ',' ']
    end 

    def displaying_the_tictactoe_board
        puts "#{board[0]} | #{board[1]}" | #{board[2]}"
        puts "#{board[3]} | #{board[4]}" | #{board[5]}"

    win_conditions = [
        [0, 1, 2]
        [3, 4, 5]
        ....
        [0, 4, 8]
    ]
end
end
#


class Cell
    pos_x
    pos_y
    player
end

@board = []

display:

display_board = 
@board.each do |cell|
    if !cell
        display_board << 



def display_board(state) --> check if you can input symbol on board
....

state.each_with_index do |

# check if horizontally same
row.count("X") == 3

# check if vertically same
[board[0][index], board[1][index], board[2][index]].count("X") == 3

# check if diagonally same
[board[0][0], board[1][1], board[2][2]].count("X") == 3
[board[0][2], board[1][1], board[2][0]].count("X") == 3






board = [' ',' ',' ',' ',' ',' ',' ',' ',' ']


    win_combinations = [  
        [0, 1, 2]
        [3, 4, 5]
        [6, 7, 8]
        [0, 4, 8]
        [6, 4, 2]
        [2, 5, 8]
        [1, 4, 7]
        [0, 3, 6]
    ]

    test for this => if player1 has win_combinations == winner 
                  => if player2 has win_combinations == winner 


puts ' #{board[0]} __ #{board[1]} __ #{board[2]} '
puts ' #{board[3]} __ #{board[4]} __ #{board[5]} '
puts ' #{board[6]} __ #{board[7]} __ #{board[8]} '

 1 | 2 | 3 
   |   | X 
   |   | X 
   |   | X 
 7 | 8 | 9 



# describe 'field' do #State
#     context 'has a content' do
#         it 'has an empty content' do
#             expect(Field.new(content: nil).content).to be nil
#         end

#         it 'has a content of "X"' do
#             expect(Field.new(content: "X").content).to eq("X")
#         end

#         it 'has a content of "O"' do
#             expect(Field.new(content: "O").content).to eq("O")
#         end
#     end

#     context 'it has a position' do
#         it 'row value is not nil' do
#             expect(Field.new(row: 1).row).not_to be nil
#         end

#         it 'column value is not nil' do
#             expect(Field.new(column: 1).column).not_to be nil
#         end

#         it 'row value is less or equal 3' do
#             expect(Field.new(row: 1).row).to be <= 3
#         end

#         it 'row value is more or equal 1' do
#             expect(Field.new(row: 1).row).to be >= 1
#         end

#         it 'column value is less or equal 3' do
#             expect(Field.new(column: 1).column).to be <= 3
#         end

#         it 'column value is more or equal 1' do
#             expect(Field.new(column: 1).column).to be >= 1
#         end
#     end
# end


    # context 'column input is between 1-3' do
    #     it 'column input is less or equal 3' do
    #         expect(@game.choose_a_field(3).last).to be <= 3
    #     end
    #     it 'column input is 1 or more' do
    #         expect(@game.choose_a_field(1).last).to be >= 1
    #     end
    # end


    # it 'returns a single digit integer' do
    #     expect(@game.choose_a_field.size).to eq(1)
    # end

    # it 'row input is an integer' do
    #     expect(@game.choose_a_field.first).to be_a_kind_of(Integer)
    # end

    # it 'column input is an integer' do
    #     expect(@game.choose_a_field.last).to be_a_kind_of(Integer)
    # end


require 'stringio'

def get_input
    $stdin.gets.chomp
end

describe "get_user_input" do
    $stdin = StringIO.new("2")

    it "returns the player's input" do
      expect(get_input).to eq("2")
    end
  end


def run_game(auto = true)
    @new_game = TicTacToe.new
    puts "Welcome to Tic Tac Toe!"
    puts @new_game.display_board
    while @new_game.check_victory_conditions == nil
        puts "#{@new_game.current_player.to_s}'s round"
        input = ""
        if @new_game.current_player == :player1 && auto == false
            puts "Select field from 1 to 9"
            input = @new_game.get_user_input.to_i
        else
            input = @new_game.choose_a_field(rand(1..9))
        end
        puts @new_game.assign_a_value(input) if @new_game.check_if_empty(input) && @new_game.check_input(input)
        puts @new_game.display_board
        puts @new_game.winner = @new_game.check_victory_conditions
        @new_game.switch_a_player
    end
    puts @new_game.display_winner
end



 
   